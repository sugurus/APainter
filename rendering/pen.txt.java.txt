

	private static final int val(int b,int o,int a1,int oa,int t,int k){
	return ((b*a1 + o * oa+t)*k>>16);
}


	@Override
	public void rendering(PixelDataBuffer base, PixelDataBuffer over, Point p,
			Rectangle clip, RenderingOption option) {
		if(base instanceof PixelDataIntBuffer){
			dolayer((PixelDataIntBuffer)base, over, p, clip, option);
		}else if(base instanceof PixelDataByteBuffer){
			domask((PixelDataByteBuffer)base,over,p,clip,option);
		}
	}

	private void dolayer(PixelDataIntBuffer base, PixelDataBuffer over, Point p,
			Rectangle clip, RenderingOption option) {
		if(option.alphaFixed){
			if(option.hasDestinationMask()){
				renderint_alphfix_dmask(base, (PixelDataIntBuffer)over, p, clip, option,(PixelDataByteBuffer)option.destinationmask);
			}else{
				renderint_alphfix(base, (PixelDataIntBuffer)over, p, clip, option);
			}
		}
		else{
			if(option.hasDestinationMask()){
				renderint_dmask(base, (PixelDataIntBuffer)over, p, clip, option,(PixelDataByteBuffer)option.destinationmask);
			}else{
				renderint(base, (PixelDataIntBuffer)over, p, clip, option);
			}
		}
	}

	private void domask(PixelDataByteBuffer base, PixelDataBuffer over, Point p,
			Rectangle clip, RenderingOption option){
		//TODO draw mask
		if(option.hasDestinationMask()){

		}else{

		}

	}

	void renderint(PixelDataIntBuffer base,PixelDataIntBuffer over,Point p,Rectangle clip,RenderingOption option){
		int[] basep = base.getData();
		int basew = base.width;
		int[] overp = over.getData();
		int overw = over.width;
		int color = option.frontColor.getARGB();
		int or=r(color);
		int og=g(color);
		int ob=b(color);
		int overalph = option.overlayeralph;
		int endy = clip.height+clip.y,endx=clip.width+clip.x;
		int px=p.x,py=p.y;


		for(int x,y = clip.y;y<endy;y++){
			for(x = clip.x;x<endx;x++){
				int c = pixel(basep,x,y,basew);
				int a = a(c);
				int r = r(c);
				int g = g(c);
				int b = b(c);

				int oc = pixel(overp,x-px,y-py,overw);
				int oa = layeralph(oc,overalph);


				if(a !=0){
					int alpha=calca(a,oa);
	
					int a1 = (255-oa > a)? a:255-oa;
int k = 65536/(a1+oa);
int t = oa + a1-1;
int red=val(r,or,a1,oa,t,k);

					int green=val(g,og,a1,oa,t,k);

					int blue=val(b,ob,a1,oa,t,k);

					set(basep,argb(alpha,red,green,blue),x,y,basew);
					continue;
				}else{
					int colora0=color;

					set(basep,oa,colora0,x,y,basew);
					continue;
				}
			}
		}
	}

	void renderint_dmask(PixelDataIntBuffer base,PixelDataIntBuffer over,Point p,Rectangle clip,RenderingOption option,
	PixelDataByteBuffer dmask){
		int[] basep = base.getData();
		int basew = base.width;
		byte[] dmaskp = dmask.getData();
		int[] overp = over.getData();
		int overw = over.width;
		int color = option.frontColor.getARGB();
		int or=r(color);
		int og=g(color);
		int ob=b(color);
		int overalph = option.overlayeralph;
		int endy = clip.height+clip.y,endx=clip.width+clip.x;
		int px=p.x,py=p.y;


		for(int x,y = clip.y;y<endy;y++){
			for(x = clip.x;x<endx;x++){
				int dmaskv = pixel(dmaskp,x,y,basew)&0xff;
				if(dmaskv==0)continue;
				int rdmaskv = 255-dmaskv;
				int c = pixel(basep,x,y,basew);
				int a = a(c);
				int r = r(c);
				int g = g(c);
				int b = b(c);

				nt oc = pixel(overp,x-px,y-py,overw);
				int oa = layeralph(oc,overalph);


				if(a !=0){
					int alpha=calca(a,oa);
	
					int a1 = (255-oa > a)? a:255-oa;
int k = 65536/(a1+oa);
int t = oa + a1-1;
int red=val(r,or,a1,oa,t,k);

					int green=val(g,og,a1,oa,t,k);

					int blue=val(b,ob,a1,oa,t,k);

					set(basep,argb(
						(alpha*dmaskv+a*rdmaskv)/255,
						(red*dmaskv+r*rdmaskv)/255,
						(green*dmaskv+g*rdmaskv)/255,
						(blue*dmaskv+b*rdmaskv)/255),x,y,basew);
					continue;
				}else{
					int colora0=color;

					int red = (r(colora0)*dmaskv+r*rdmaskv)/255
					int green = (g(colora0)*dmaskv+g*rdmaskv)/255
					int blue = (b(colora0)*dmaskv+b*rdmaskv)/255
					
					set(basep,argb(
						oa*dmaskv/255,
						red,green,blue
					),x,y,basew);
					continue;
				}
			}
		}
	}

	void renderint_alphfix(PixelDataIntBuffer base,PixelDataIntBuffer over,Point p,Rectangle clip,RenderingOption option){
		int[] basep = base.getData();
		int basew = base.width;
		int[] overp = over.getData();
		int overw = over.width;
		int color = option.frontColor.getARGB();
		int or=r(color);
		int og=g(color);
		int ob=b(color);
		int overalph = option.overlayeralph;
		int endy = clip.height+clip.y,endx=clip.width+clip.x;
		int px=p.x,py=p.y;


		for(int y = clip.y;y<endy;y++){
			for(int x = clip.x;x<endx;x++){
				int c = pixel(basep,x,y,basew);
				int a = a(c);
				if(a !=0){
					int oc = pixel(overp,x-px,y-py,overw);
					int oa = layeralph(oc,overalph);
					int r = r(c);
					int g = g(c);
					int b = b(c);

					int a1 = (255-oa > a)? a:255-oa;
int k = 65536/(a1+oa);
int t = oa + a1-1;
int red=val(r,or,a1,oa,t,k);

					int green=val(g,og,a1,oa,t,k);

					int blue=val(b,ob,a1,oa,t,k);

					set(basep,
							argb(a,red,green,blue),
							x,y,basew);
					continue;
				}
			}
		}
	}


	void renderint_alphfix_dmask(PixelDataIntBuffer base,PixelDataIntBuffer over,Point p,Rectangle clip,RenderingOption option,
		PixelDataByteBuffer mask){
		int[] basep = base.getData();
		int basew = base.width;
		byte[] dmaskp = mask.getData();
		int[] overp = over.getData();
		int overw = over.width;
		int color = option.frontColor.getARGB();
		int or=r(color);
		int og=g(color);
		int ob=b(color);
		int overalph = option.overlayeralph;
		int endy = clip.height+clip.y,endx=clip.width+clip.x;
		int px=p.x,py=p.y;


		for(int y = clip.y;y<endy;y++){
			for(int x = clip.x;x<endx;x++){
				int dmaskv = pixel(dmaskp,x,y,basew)&0xff;
				if(dmaskv==0)continue;
				int rdmaskv=255-dmaskv;
				int c = pixel(basep,x,y,basew);
				int a = a(c);
				
				if(a !=0){
					int oc =pixel(overp,x-px,y-py,overw);
					int oa = layeralph(a(oc),overalph);
					int r = r(c);
					int g = g(c);
					int b = b(c);


					int a1 = (255-oa > a)? a:255-oa;
int k = 65536/(a1+oa);
int t = oa + a1-1;
int red=val(r,or,a1,oa,t,k);

					int green=val(g,og,a1,oa,t,k);

					int blue=val(b,ob,a1,oa,t,k);

					set(basep,
							argb(a,
								(red*dmaskv+r*rdmaskv)/255,
								(green*dmaskv+g*rdmaskv)/255,
								(blue*dmaskv+b*rdmaskv)/255),
							x,y,basew);
					continue;
				}
			}
		}
	}

	//TODO mask